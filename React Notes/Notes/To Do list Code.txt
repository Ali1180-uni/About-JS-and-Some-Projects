import { useState } from "react";

function ToDo () {
    let [Task, setTask] = useState([]); // First State save the Array of All the Tasks added by newTask
    let [newTask, setNewTask] = useState([""]); // This can save the value of input before the addition
    function updateList(event){ // This Function can be used in button to Set the value of newTask to Task
        setTask([...Task, newTask]); // Here we set the value of newTask array to Task array fetch from event object
    }
    function fetchValue(event){  // This Function can be used to Take the value of input from event object
        setNewTask(event.target.value); // Here the value of input is added in the newTask array which is later transfered to Task array
    }
    return (
        <div>
            <h1>To-Do List</h1>
                <input 
                style={{height: "50px", width: "200px", border: "2px solid white"}} 
                placeholder = "Enter the Task" 
                type = "text"
                value = {newTask} // Here we set that the input value to newTask array
                onChange={fetchValue} // Here the value is transfered or chnage occur
                />
                <br /><br />
                <button onClick={updateList}>Enter the Task</button>
            <br /><br /><hr />
            <div>
                <ul>
                    {Task.map((tasks)=>(
                        <li>{tasks}</li>
                    ))}
                </ul>
            </div>
        </div>
    );
}

export default ToDo;


Now Here we have a Problem : Problems is that the Each value added in array want an id to access it later but we don't write the logic of it
So, We just add the id by uuid npm Package and Use Objects instead of Array in inial Stage;

-> npm i uuid
-> import and pass it in object of inial value of the Array of objects in Task
-> Now also add the value in map method which automaticalyy assign the random id

import {v4 as uuidv4} from "uuid"; 
let [Task, setTask] = useState([{Task: "Tasks Left", id: uuidv4()}]); // Here we use the Array ob objects to add the Map Function
setTask([...Task, {Task: newTask, id: uuidv4()}]);
<ul>
    {Task.map((tasks)=>(
        <li key={tasks.id}>{tasks.Task}</li>
    ))}
</ul>

->>>>>> Changes in case of object added

So like this Data is saved in State:-

[
  {
    "name": "State",
    "value": [
      {
        "Task": "Ali",
        "id": "3dbc427b-8b00-4fd5-83b4-2f58ecfa3d5d"
      }
    ],
    "subHooks": [],
    "debugInfo": null,
    "hookSource": {
      "lineNumber": 22,
      "functionName": "ToDo",
      "fileName": "http://localhost:5173/src/To-do.jsx?t=1756722930450",
      "columnNumber": 25
    }
  },
  {
    "name": "State",
    "value": "Situation",
    "subHooks": [],
    "debugInfo": null,
    "hookSource": {
      "lineNumber": 23,
      "functionName": "ToDo",
      "fileName": "http://localhost:5173/src/To-do.jsx?t=1756722930450",
      "columnNumber": 31
    }
  }
]


Now Adding a Delete Button in our Todo List 
-> Must use Filter for removing & map for Updating instead of pop,push & splice etc...

function deleteValue(id) {
    setTask((addedTask) => {
        return addedTask.filter((NewTask) => NewTask.id != id); // Ckecking the id
    });
}

{Task.map((tasks) => (
    <li key={tasks.id}>
        <span>{tasks.Task}</span>
        &nbsp;&nbsp;&nbsp;
        <button onClick={() => {deleteValue(tasks.id);}}>Delete</button> // Giving the id by Callback bcz if we directly use in function it execute and onclick doesn't work
    </li>
))}

-> Ok now lets update the Array Completely: 

function UpdateAll() {
  setTask((addedTask) => {
    return addedTask.map((upTodo) => {
      return {
        ...upTodo,
        Task: upTodo.Task.toUpperCase(),
      };
    });
  });
}

Use it Tjis function in a similar Button

<button onClick={UpdateAll}>Update to Uppercase</button>

Now Similarly we are updating only one value

But jab hamne Single element me chnage lana hn to ToDo

  function UpdateOneUpper(id) {
    setTask((addedTask) => {
      return addedTask.map((upTodo) => {
        if(upTodo.id === id){ // Jo hamne change krna hn wo change hoga baki sab same
        return {
          ...upTodo,
            Task: upTodo.Task.toUpperCase()
          }
        }else{
          return upTodo; // Must return other todos bcz we are changing only one
        }
      });
    });
  }

Differnet but same like delete update by id
Button is also:-
<button onClick={() => {UpdateOneUpper(tasks.id);}}>Update to Uppercase</button>

ok a the end i add the mark as done feature in my to-do List

  let [Task, setTask] = useState([
    { Task: "Tasks Left", id: uuidv4(), isDone: false },
  ]);

-> First Extend the size of the object and add an object isdone and make it false
-> So the logic is that a function can make this value true and if it is true
-> it creates a custon styling of line-through and mark as done is shown to us

  function Done(id) {
    setTask((style) => {
     return style.map((change) => {
        if (change.id == id) {
          return {
            ...change, isDone: !change.isDone
          }
        }else{
          return change;
        }
      });
    });
  }

  let style = {
    textDecoration: "line-through"
  }

Some thing like this->>>>>>>

{tasks.isDone ? <span style={style}>{tasks.Task}</span> : <span>{tasks.Task}</span>} // Setting Condition for styling

Button Added -->

<button
  onClick={() => {
    Done(tasks.id);
  }}
>
  Mark as Done
</button>

