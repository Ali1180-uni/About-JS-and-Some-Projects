We also write the conditionals for it in whci we mostly use the Ternery Operator.
Bcz the If-else condition create the duplication of the Code a lot

function Tab({title, button, Aura}) {
  return (
    <div className="Tab">
      <Title title = {title}/>
      <Button button = {button} />
      {Aura > 25 ? <p>High Aura</p> : <p>Low Aura</p>}
    </div>
  );
}

We also use another way to procceed it. it is only be used when there is only one Condition we show.
Eg:- If we show only the if-statement not else So, in this case we used the && Operator

{Aura > 25 && <p>High Aura</p>}

Now this statement can show only the one statement otherwise no statement been show
To Avoid to be created a extra DOM use null in else

function Tab({title, button, Aura}) {
  return (
    <div className="Tab">
      <Title title = {title}/>
      <Button button = {button} />
      {Aura > 25 ? <p>High Aura</p> : null}
    </div>
  );
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------

We can also add the custom styling my JSX syntax:-
on the basis of Condition:-

function Tab({title, button, Aura}) {
  let isDiscount = Aura > 25;
  let style =  {
    backgroundColor : isDiscount ? "Grey" : "Red",
    color : isDiscount ? "Black" : "Yellow"
   }
  return (
    <div className="Tab" style={style}>
      <Title title = {title}/>
      <Button button = {button} />
      {isDiscount ? <p>High Aura</p> : <p>Low Aura</p>}
    </div>
  );
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------

Also add styling on the basis of condition and With specific syntax

function Msg ({user, msg, color}){
    // const style = user === "Ali"  // specific styling
    //     ? {
    //         backgroundColor: "grey",
    //         color: "black"
    //       }
    //     : {
    //         backgroundColor: "red",
    //         color: "yellow"
    //       };
    
    return (
        <div className="Tab">
            <h1 style={{color : color}}>{user}</h1> // also must follow this syntax of nested curly brackets
            <h3>{msg}</h3>
        </div>
    );
}

Now in app.jsx we can easily pass the custon color of each tag

function App() {
  return (
    <div>
      <Msg user="Ali" msg="hey dev!" color="skyBlue"/>
      <Msg user="Aliza" msg="hey dev!" color="pink"/>
    </div>
  );
}

