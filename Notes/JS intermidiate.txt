ARRAY METHODS : For Each

let arr = [1,2,3,4,5,6];

let fun = function(){
    console.log("Ali");
}

arr.forEach(fun); //also pass it function only

arr.forEach(function(){
    console.log("Ali");
}); //is to print the Ali to arr.length = 6 for this case

arr.forEach(function(ele){
    console.log(ele);
}); // is to print the elements of array

forEach on the objects

arr.forEach((ele) => {
    console.log(ele);
}); //also create the arrow function for it 

let arr2 = [{
    name: "ALi",
    age: 12
},{
    name: "lipo",
    age: 19
},{
    name: "Javed",
    age: 17
}];

let each = arr2.forEach((ele)=>{
    console.log(ele.age);
});

console.log(each); //this also work on the objects and its each key element

MAP & FILTER METHODS
let forMap = arr2.map((ele)=>{
    return ele.age*2;
}); // it just create the another array ForMap according the specific condition

let arr=[1,2,4,5,7,4,3,2,5,67,34];

let ForFilter = arr.filter((ele)=>{
    return ele%2==0;
});
// filter is also create the array with specific condition values


ARR.(EVERY)==>AND==> FUNCTION CHECK THAT IN THE ARRAY EVERY VALUE MEET THE CONDITION IF EVERY MEET IT SHOW TRUE OTHERWISE IT SHOW FALSE EVEN IF A SINGLE VALUE IS FALSE
ARR.(SOME)==>OR==> FUNCTION CHECK THAT IN THE ARRAY ALL VALUES ARE FALSE BCZ IT SHOW FALSE ONLY WHEN ALL ARE FALSE OTHERWISE IT SHOW TRUE EVEN A SINGLE VALUE IS TRUE

reduce method is used to make the answer in a single value on the basis of 2 values 
sab se pele ik value ele me jati hn then wo res me ab res me ele ki previous value store hn
is tara arr.length sab values save ho jati hn or koi operation se ik single value result me atii hn

// let arr = [10,90,80,50];

// let max = arr.reduce((res,ele)=>{
//     if(res<ele){
//         return ele;
//     }
//     else{
//         return res;
//     }
// });

// console.log(max);

// let mul = arr.reduce((ele)=>{
//     return ele%10==0;
// });
// console.log(mul);

// function GetMin(arr){
//     let min = arr.reduce((min,ele)=>{
//     if(ele<min){
//         return ele;
//     }
//     else{
//         return min;
//     }
// });

// return min;
// }


// spread is used to make the values indivisually and it is used (...arr) this type of syntax

// let arr =[1,4,3,2,5,6,8,9,44];
// let str = "AliRehmani";
// Math.max(...arr);
// Math.min(...arr);
// console.log(...str);

we mostly use the ...spread function to make the copy of data bcz it make the array data & save it indivisuallyas they are in their orignal array

const obj ={
    name: "Ali",
    age: 12
};

let newObj = {...obj,height: 123,nose: "Thin"};// exact copy and also add some key values.

let arr = "Project";
let arr1 = [5,4,3,2,1];

let obj1 = {...arr};
let obj2 = {...arr1};

// we can use the concept of REST to make the number of arguments as a one argument ...args or etc

function name(...args){
    for(let i=0;i<args.length;i++){
        console.log(`Your name ${args[i]}`);
    }
}
// it is used when we make the number of arguments and stored in one array and also want to use array methods on it.

let names = ["Ali","Talha","wasir","qadir","sdf","erw","were"];

let [first,second,...other] = names; // First = Ali , second = Talha , ...other = all others in array according to the concept of REST

Also Used for Object Literals
const student = {
    name: "Ali",
    age: 19,
    Weight: 17,
    city: "FSD"
};

let {name: StuName, age: org, city, password = "lipo",...names} = student;