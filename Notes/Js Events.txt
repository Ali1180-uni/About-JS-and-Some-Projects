CallBacks are the Functions that pass as an argument
Events tell the browser that something is happening on the web page
let btn = document.querySelector("button");

console.dir(btn);

// btn.onclick = function(){
//     console.log("This Button is Clicked");
// };

function btnfun(){
    alert("Button Clicked");
}

btn.onclick = btnfun;

let btns = document.querySelectorAll("button");

function hover(){
    console.log("You are Hover on the Button");
}

for (let btn of btns) {
    btn.onmouseenter = hover; // On mouse is used to perform something when we hover
    btn.onclick = btnfun; // on click is used to perform something when we click the button
}

//Event Listeners

let btn = document.querySelectorAll("button");
console.dir(btn);
for(let btns of btn){
    // btns.addEventListener(eventName,callback/Function){};
    btns.addEventListener("click",fun);
    btns.addEventListener("click",fun2);
}
function fun(){
    console.log("Clicked");
}
function fun2(){
    alert("Clicked with Alert !");
}

Same as it is we can add the Keyboard Functions on the Events

div.addEventListener("keydown",function(event){
    console.log(event);
});

Same with the form Actions
form.addEventListener("submit",function(event){
    event.preventDefault(); // it is used to stop the action which done by default when the form is execute
    alert(`form Submit and Text is ${input.value}`);
});

iske ilawa agr ham likh de ke
let btn = document.querySelectorAll("button");
iski jagah
let btn = this.element[2];

// event is occur when there is nested elements like that the div>ul>li
// and when the most inner elements is evented then the outer elements also run first

div.addEventListener("click",function(){
    console.log("Div is Clicked");
});

ul.addEventListener("click",function(event){
    event.stopPropagation();
    console.log("ul is Clicked");
});

for(lis of li){
    lis.addEventListener("click",function(event){
    event.stopPropagation(); // it used to stop the Event Bubling
    console.log("li is Clicked");
});
}